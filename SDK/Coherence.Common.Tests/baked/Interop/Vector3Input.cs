// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using System;
    using UnityEngine;

    public struct Vector3Input : IEntityInput, IEquatable<Vector3Input>
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public Vector3 vector3Field;
        }

        public static unsafe Vector3Input FromInterop(System.IntPtr data, System.Int32 dataSize)
        {
            if (dataSize != 12) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 12) " +
                    "for input with ID 5");
            }

            var orig = new Vector3Input();
            var comp = (Interop*)data;
            orig.vector3Field = comp->vector3Field;
            return orig;
        }

        public uint GetComponentType() => 5;

        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public long Frame { get; set; }
        private bool isRemoteInput;

        public Vector3 vector3Field;

        public Vector3Input(
        Entity entity,
        long frame,
        Vector3 vector3Field,
        bool isRemoteInput)
        {
            this.Entity = entity;
            this.ChannelID = Coherence.ChannelID.Default;
            this.Routing = MessageTarget.All;
            this.Sender = 0;
            this.Frame = frame;
            this.isRemoteInput = isRemoteInput;
            this.vector3Field = vector3Field;
        }

        public override string ToString()
        {
            return $"Entity: {Entity}, Frame: {Frame}, Inputs: [vector3Field:{vector3Field}]";
        }

        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }

        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() => default;

        public void NullEntityRefs(Entity entity) { }

        public bool Equals(Vector3Input other)
        {
            return
                this.vector3Field == other.vector3Field;
        }

        public static void Serialize(Vector3Input inputData, IOutProtocolBitStream bitStream)
        {
            var converted_vector3Field = inputData.vector3Field.ToCoreVector3();
            bitStream.WriteVector3(converted_vector3Field, FloatMeta.NoCompression());
        }

        public static Vector3Input Deserialize(IInProtocolBitStream bitStream, Entity entity, long frame)
        {
            var converted_vector3Field = bitStream.ReadVector3(FloatMeta.NoCompression());
            var datavector3Field = converted_vector3Field.ToUnityVector3();

            return new Vector3Input()
            {
                Entity = entity,
                Frame = frame,
                vector3Field = datavector3Field,
                isRemoteInput = true
            };
        }
    }

}
