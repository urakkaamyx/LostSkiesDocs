// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using System;
    using System.Runtime.InteropServices;
    using System.Collections.Generic;
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.SimulationFrame;
    using Coherence.Entities;
    using Coherence.Utils;
    using Coherence.Brook;
    using Coherence.Core;
    using Logger = Coherence.Log.Logger;
    using UnityEngine;
    using Coherence.Toolkit;
    public struct MultiComponent : ICoherenceComponentData
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 intValue;
            [FieldOffset(4)]
            public System.Single floatValue0;
            [FieldOffset(8)]
            public System.Single floatValue1;
        }

        public void ResetFrame(AbsoluteSimulationFrame frame)
        {
            FieldsMask |= MultiComponent.intValueMask;
            intValueSimulationFrame = frame;
            FieldsMask |= MultiComponent.floatValue0Mask;
            floatValue0SimulationFrame = frame;
            FieldsMask |= MultiComponent.floatValue1Mask;
            floatValue1SimulationFrame = frame;
        }

        public static unsafe MultiComponent FromInterop(IntPtr data, Int32 dataSize, InteropAbsoluteSimulationFrame* simFrames, Int32 simFramesCount)
        {
            if (dataSize != 12) {
                throw new Exception($"Given data size is not equal to the struct size. ({dataSize} != 12) " +
                    "for component with ID 21");
            }

            if (simFramesCount != 0) {
                throw new Exception($"Given simFrames size is not equal to the expected length. ({simFramesCount} != 0) " +
                    "for component with ID 21");
            }

            var orig = new MultiComponent();

            var comp = (Interop*)data;

            orig.intValue = comp->intValue;
            orig.floatValue0 = comp->floatValue0;
            orig.floatValue1 = comp->floatValue1;

            return orig;
        }


        public static uint intValueMask => 0b00000000000000000000000000000001;
        public AbsoluteSimulationFrame intValueSimulationFrame;
        public System.Int32 intValue;
        public static uint floatValue0Mask => 0b00000000000000000000000000000010;
        public AbsoluteSimulationFrame floatValue0SimulationFrame;
        public System.Single floatValue0;
        public static uint floatValue1Mask => 0b00000000000000000000000000000100;
        public AbsoluteSimulationFrame floatValue1SimulationFrame;
        public System.Single floatValue1;

        public uint FieldsMask { get; set; }
        public uint StoppedMask { get; set; }
        public uint GetComponentType() => 21;
        public int PriorityLevel() => 100;
        public const int order = 0;
        public uint InitialFieldsMask() => 0b00000000000000000000000000000111;
        public bool HasFields() => true;
        public bool HasRefFields() => false;


        public long[] GetSimulationFrames() {
            return null;
        }

        public int GetFieldCount() => 3;


        
        public HashSet<Entity> GetEntityRefs()
        {
            return default;
        }

        public uint ReplaceReferences(Entity fromEntity, Entity toEntity)
        {
            return 0;
        }
        
        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper)
        {
            return IEntityMapper.Error.None;
        }

        public ICoherenceComponentData Clone() => this;
        public int GetComponentOrder() => order;
        public bool IsSendOrdered() => false;


        public AbsoluteSimulationFrame? GetMinSimulationFrame()
        {
            AbsoluteSimulationFrame? min = null;


            return min;
        }

        public ICoherenceComponentData MergeWith(ICoherenceComponentData data)
        {
            var other = (MultiComponent)data;
            var otherMask = other.FieldsMask;

            FieldsMask |= otherMask;
            StoppedMask &= ~(otherMask);

            if ((otherMask & 0x01) != 0)
            {
                this.intValueSimulationFrame = other.intValueSimulationFrame;
                this.intValue = other.intValue;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.floatValue0SimulationFrame = other.floatValue0SimulationFrame;
                this.floatValue0 = other.floatValue0;
            }

            otherMask >>= 1;
            if ((otherMask & 0x01) != 0)
            {
                this.floatValue1SimulationFrame = other.floatValue1SimulationFrame;
                this.floatValue1 = other.floatValue1;
            }

            otherMask >>= 1;
            StoppedMask |= other.StoppedMask;

            return this;
        }

        public uint DiffWith(ICoherenceComponentData data)
        {
            throw new System.NotSupportedException($"{nameof(DiffWith)} is not supported in Unity");
        }

        public static uint Serialize(MultiComponent data, bool isRefSimFrameValid, AbsoluteSimulationFrame referenceSimulationFrame, IOutProtocolBitStream bitStream, Logger logger)
        {
            if (bitStream.WriteMask(data.StoppedMask != 0))
            {
                bitStream.WriteMaskBits(data.StoppedMask, 3);
            }

            var mask = data.FieldsMask;

            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.intValue;



                bitStream.WriteIntegerRange(fieldValue, 32, -2147483648);
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.floatValue0;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;
            if (bitStream.WriteMask((mask & 0x01) != 0))
            {


                var fieldValue = data.floatValue1;



                bitStream.WriteFloat(fieldValue, FloatMeta.NoCompression());
            }

            mask >>= 1;

            return mask;
        }

        public static MultiComponent Deserialize(AbsoluteSimulationFrame referenceSimulationFrame, InProtocolBitStream bitStream)
        {
            var stoppedMask = (uint)0;
            if (bitStream.ReadMask())
            {
                stoppedMask = bitStream.ReadMaskBits(3);
            }

            var val = new MultiComponent();
            if (bitStream.ReadMask())
            {

                val.intValue = bitStream.ReadIntegerRange(32, -2147483648);
                val.FieldsMask |= MultiComponent.intValueMask;
            }
            if (bitStream.ReadMask())
            {

                val.floatValue0 = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= MultiComponent.floatValue0Mask;
            }
            if (bitStream.ReadMask())
            {

                val.floatValue1 = bitStream.ReadFloat(FloatMeta.NoCompression());
                val.FieldsMask |= MultiComponent.floatValue1Mask;
            }

            val.StoppedMask = stoppedMask;

            return val;
        }


        public override string ToString()
        {
            return $"MultiComponent(" +
                $" intValue: { this.intValue }" +
                $" floatValue0: { this.floatValue0 }" +
                $" floatValue1: { this.floatValue1 }" +
                $" Mask: { System.Convert.ToString(FieldsMask, 2).PadLeft(3, '0') }, " +
                $"Stopped: { System.Convert.ToString(StoppedMask, 2).PadLeft(3, '0') })";
        }
    }

}
