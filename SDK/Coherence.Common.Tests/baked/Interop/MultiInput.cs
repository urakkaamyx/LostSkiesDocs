// Copyright (c) coherence ApS.
// For all coherence generated code, the coherence SDK license terms apply. See the license file in the coherence Package root folder for more information.

// <auto-generated>
// Generated file. DO NOT EDIT!
// </auto-generated>
namespace Coherence.Generated
{
    using Coherence.ProtocolDef;
    using Coherence.Serializer;
    using Coherence.Brook;
    using Coherence.Entities;
    using Coherence.Log;
    using Coherence.Core;
    using System.Collections.Generic;
    using System.Runtime.InteropServices;
    using System;
    using UnityEngine;

    public struct MultiInput : IEntityInput, IEquatable<MultiInput>
    {
        [StructLayout(LayoutKind.Explicit)]
        public struct Interop
        {
            [FieldOffset(0)]
            public System.Int32 intField;
            [FieldOffset(4)]
            public System.Single floatField;
            [FieldOffset(8)]
            public Vector2 axisField;
            [FieldOffset(16)]
            public ByteArray stringField;
        }

        public static unsafe MultiInput FromInterop(System.IntPtr data, System.Int32 dataSize)
        {
            if (dataSize != 32) {
                throw new System.Exception($"Given data size is not equal to the struct size. ({dataSize} != 32) " +
                    "for input with ID 7");
            }

            var orig = new MultiInput();
            var comp = (Interop*)data;
            orig.intField = comp->intField;
            orig.floatField = comp->floatField;
            orig.axisField = comp->axisField;
            orig.stringField = comp->stringField.Data != null ? System.Text.Encoding.UTF8.GetString((byte*)comp->stringField.Data, (int)comp->stringField.Length) : null;
            return orig;
        }

        public uint GetComponentType() => 7;

        public Entity Entity { get; set; }
        public Coherence.ChannelID ChannelID { get; set; }
        public MessageTarget Routing { get; set; }
        public uint Sender { get; set; }
        public long Frame { get; set; }
        private bool isRemoteInput;

        public System.Int32 intField;
        public System.Single floatField;
        public Vector2 axisField;
        public System.String stringField;

        public MultiInput(
        Entity entity,
        long frame,
        System.Int32 intField,
        System.Single floatField,
        Vector2 axisField,
        System.String stringField,
        bool isRemoteInput)
        {
            this.Entity = entity;
            this.ChannelID = Coherence.ChannelID.Default;
            this.Routing = MessageTarget.All;
            this.Sender = 0;
            this.Frame = frame;
            this.isRemoteInput = isRemoteInput;
            this.intField = intField;
            this.floatField = floatField;
            this.axisField = axisField;
            this.stringField = stringField;
        }

        public override string ToString()
        {
            return $"Entity: {Entity}, Frame: {Frame}, Inputs: [intField:{intField}, floatField:{floatField}, axisField:{axisField}, stringField:{stringField}]";
        }

        public IEntityMessage Clone()
        {
            // This is a struct, so we can safely return
            // a struct copy.
            return this;
        }

        public IEntityMapper.Error MapToAbsolute(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToAbsoluteEntity(Entity, false, out var absoluteEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = absoluteEntity;
            return IEntityMapper.Error.None;
        }

        public IEntityMapper.Error MapToRelative(IEntityMapper mapper, Coherence.Log.Logger logger)
        {
            var err = mapper.MapToRelativeEntity(Entity, false, out var relativeEntity);
            if (err != IEntityMapper.Error.None)
            {
                return err;
            }
            Entity = relativeEntity;
            return IEntityMapper.Error.None;
        }

        public HashSet<Entity> GetEntityRefs() => default;

        public void NullEntityRefs(Entity entity) { }

        public bool Equals(MultiInput other)
        {
            return
                this.intField == other.intField&&
                this.floatField == other.floatField&&
                this.axisField == other.axisField&&
                this.stringField == other.stringField;
        }

        public static void Serialize(MultiInput inputData, IOutProtocolBitStream bitStream)
        {
            bitStream.WriteIntegerRange(inputData.intField, 32, -2147483648);
            bitStream.WriteFloat(inputData.floatField, FloatMeta.NoCompression());
            var converted_axisField = inputData.axisField.ToCoreVector2();
            bitStream.WriteVector2(converted_axisField, FloatMeta.NoCompression());
            bitStream.WriteShortString(inputData.stringField);
        }

        public static MultiInput Deserialize(IInProtocolBitStream bitStream, Entity entity, long frame)
        {
            var dataintField = bitStream.ReadIntegerRange(32, -2147483648);
            var datafloatField = bitStream.ReadFloat(FloatMeta.NoCompression());
            var converted_axisField = bitStream.ReadVector2(FloatMeta.NoCompression());
            var dataaxisField = converted_axisField.ToUnityVector2();
            var datastringField = bitStream.ReadShortString();

            return new MultiInput()
            {
                Entity = entity,
                Frame = frame,
                intField = dataintField,
                floatField = datafloatField,
                axisField = dataaxisField,
                stringField = datastringField,
                isRemoteInput = true
            };
        }
    }

}
