    using Logger = Log.Logger;

    public class CoherenceBridgeImpl
    {
        [RuntimeInitializeOnLoadMethod(RuntimeInitializeLoadType.BeforeSceneLoad)]
        static void OnRuntimeMethodLoad()
        {
            Impl.AssetId = AssetId;
            Impl.GetSpawnInfo = GetSpawnInfo;
            Impl.GetRootDefinition = GetRootDefinition;
            Impl.CreateConnectionSceneUpdateInternal = CreateConnectionSceneUpdateInternal;
            Impl.GetDataInteropHandler = GetDataInteropHandler;
        }

        private static uint AssetId()
        {
            return Definition.InternalAssetId;
        }

        static (bool, SpawnInfo) GetSpawnInfo(IClient client, IncomingEntityUpdate entityUpdate, Logger logger)
        {
            var info = new SpawnInfo();
            var gotPosition = false;
            var gotUnityAsset = false;

            foreach (var comp in entityUpdate.Components.Updates.Store)
            {
                switch(comp.Value.Data)
                {
                    case WorldPosition pos:
                        info.position = pos.value;
                        gotPosition = true;
                        break;
                    case WorldOrientation rot:
                        info.rotation = rot.value;
                        break;
                    case AssetId assetId:
                        if (CoherenceSyncConfigRegistry.Instance.GetFromNetworkId(assetId.value, out var config))
                        {
                            info.assetId = config.ID; // actual asset ID
                            info.isFromGroup = assetId.isFromGroup;
                            gotUnityAsset = true;
                        }
                        else
                        {
                            logger.Error(Coherence.Log.Error.ToolkitSpawnInfoMissingConfigSync,
                                $"Can't find sync config from asset ID: {assetId.value}.");
                        }
                        break;
                    case ConnectedEntity connectedEntity:
                        info.connectedEntity = connectedEntity.value;
                        break;
                    case Connection con:
                        info.clientId = (ClientID)con.id;
                        info.connectionType = (ConnectionType)con.type;
                        break;
                    case UniqueID uid:
                        info.uniqueId = uid.uuid;
                        break;
                }
            }

            var shouldSpawn = (gotPosition && gotUnityAsset) || info.clientId.HasValue;

            return (shouldSpawn, info);
        }

        private static IDefinition GetRootDefinition()
        {
            return new Definition();
        }

        private static ICoherenceComponentData CreateConnectionSceneUpdateInternal(uint sceneIndex, AbsoluteSimulationFrame simFrame)
        {
            var update = new ConnectionScene()
            {
                value = sceneIndex,
                valueSimulationFrame = simFrame,
                FieldsMask = 0b1,
            };

            return update;
        }

        private static IDataInteropHandler GetDataInteropHandler()
        {
            return new DataInteropHandler();
        }
    }
