using System;
using Coherence.Toolkit;
using UnityEngine;

[DisplayName("MyCustomProvider", "Tooltip for My Custom Provider")]
[Serializable]
public class CustomProvider : INetworkObjectProvider
{
    // You can serialize the data you need to load your prefab from your workflow.
    [SerializeField] private string customString;
    
    /// <summary>
    ///     Called when coherence needs to load a prefab to memory, to instantiate it when a new network entity
    ///     is created.
    /// </summary>
    public void LoadAsset(string networkAssetId, Action<ICoherenceSync> onLoaded)
    {
    }
    
    /// <summary>
    ///     Called from CoherenceSyncConfig when CoherenceSyncConfig.Instantiate is called, the object is loaded forcing
    ///     synchronicity. If the provider is naturally asynchronous (Addressables/Asset Bundles), using this method
    ///     can incur in heavy performance penalties because the main thread will be blocked while the object is loaded.
    /// </summary>
    public ICoherenceSync LoadAsset(string networkAssetId)
    {
        return null;
    }
    
    /// <summary>
    ///     Called when coherence needs to destroy a prefab instance, when the related network entity is destroyed.
    /// </summary>
    public void Release(ICoherenceSync obj)
    {
    }
    
    /// <summary>
    ///     Called when the application exits.
    /// </summary>
    public void OnApplicationQuit()
    {
    }
    
#region UNITY_EDITOR
    /// <summary>
    ///     Editor only method, that is called when an instance of this provider is assigned to a network entry.
    /// </summary>
    public void Initialize(CoherenceSyncConfig entry)
    {
    }
    
    /// <summary>
    ///     Editor only method, that is called by the UI to validate the serialized data of this Provider.
    /// </summary>
    public bool Validate(CoherenceSyncConfig entry)
    {
        return true;
    }
#endregion
}
